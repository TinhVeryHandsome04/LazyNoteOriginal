const { GoogleGenerativeAI } = require('@google/generative-ai');

class GeminiService {
  constructor() {
    if (!process.env.GEMINI_API_KEY) {
      throw new Error('GEMINI_API_KEY is missing');
    }
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    this.model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
  }

  async analyzeMessage(message) {
    try {
      const chat = this.model.startChat({
        history: [],
        generationConfig: {
          temperature: 0.9,
          maxOutputTokens: 2048,
        },
      });

      const prompt = `B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¢n thi·ªán, nhi·ªát t√¨nh v√† am hi·ªÉu v·ªÅ t√†i ch√≠nh. H√£y tr√≤ chuy·ªán v·ªõi ng∆∞·ªùi d√πng m·ªôt c√°ch t·ª± nhi√™n, g·∫ßn g≈©i nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n.

      Nguy√™n t·∫Øc tr√≤ chuy·ªán:
      1. Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, th√¢n thi·ªán v√† t·ª± nhi√™n
      2. C√≥ th·ªÉ th·∫£o lu·∫≠n v·ªÅ m·ªçi ch·ªß ƒë·ªÅ, kh√¥ng ch·ªâ gi·ªõi h·∫°n ·ªü t√†i ch√≠nh
      3. Khi n√≥i v·ªÅ t√†i ch√≠nh, h√£y ƒë∆∞a ra l·ªùi khuy√™n h·ªØu √≠ch
      4. S·ª≠ d·ª•ng emoji üòä ƒë·ªÉ t·∫°o c·∫£m gi√°c g·∫ßn g≈©i
      5. C√≥ th·ªÉ h·ªèi l·∫°i ng∆∞·ªùi d√πng ƒë·ªÉ hi·ªÉu r√µ h∆°n v·∫•n ƒë·ªÅ

      N·∫øu tin nh·∫Øn c√≥ th√¥ng tin v·ªÅ ti·ªÅn, h√£y th√™m d√≤ng FINANCIAL_INFO ·ªü cu·ªëi theo format:
      FINANCIAL_INFO:s·ªë_ti·ªÅn|lo·∫°i
      
      Trong ƒë√≥:
      - s·ªë_ti·ªÅn: s·ªë ti·ªÅn (√¢m n·∫øu chi ti√™u, d∆∞∆°ng n·∫øu thu nh·∫≠p)
      - lo·∫°i: 'expense' n·∫øu chi ti√™u, 'income' n·∫øu thu nh·∫≠p
      
      V√≠ d·ª•:
      - User: "t√¥i ti√™u 300k ƒÉn tr∆∞a"
      AI: "·ªí, b·∫°n ƒë√£ ƒÉn tr∆∞a h√¥m nay √†? 300k nghe c≈©ng h∆°i cao ƒë·∫•y üòä N·∫øu ƒë∆∞·ª£c, b·∫°n c√≥ th·ªÉ th·ª≠ t√¨m nh·ªØng qu√°n c∆°m b√¨nh d√¢n ho·∫∑c t·ª± mang c∆°m ƒëi l√†m ƒë·ªÉ ti·∫øt ki·ªám h∆°n nh√©! T√¥i s·∫Ω ghi l·∫°i kho·∫£n chi ti√™u n√†y cho b·∫°n."
      FINANCIAL_INFO:-300000|expense

      - User: "t√¥i v·ª´a ƒë∆∞·ª£c th∆∞·ªüng T·∫øt 15 tri·ªáu"
      AI: "Wow, ch√∫c m·ª´ng b·∫°n nh√©! üéâ ƒê√≥ l√† m·ªôt kho·∫£n th∆∞·ªüng r·∫•t t·ªët ƒë·∫•y. B·∫°n c√≥ k·∫ø ho·∫°ch g√¨ cho s·ªë ti·ªÅn n√†y ch∆∞a? T√¥i c√≥ th·ªÉ g·ª£i √Ω b·∫°n c√°ch ph√¢n b·ªï h·ª£p l√Ω: 50% cho chi ti√™u c·∫ßn thi·∫øt, 30% ti·∫øt ki·ªám v√† 20% cho gi·∫£i tr√≠. ƒêi·ªÅu n√†y s·∫Ω gi√∫p b·∫°n c√¢n b·∫±ng gi·ªØa h∆∞·ªüng th·ª• v√† t√≠ch l≈©y üòä"
      FINANCIAL_INFO:15000000|income

      - User: "d·∫°o n√†y b·∫°n th·∫•y th·∫ø n√†o?"
      AI: "C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m nh√©! üòä M√¨nh lu√¥n trong tr·∫°ng th√°i t·ªët v√† s·∫µn s√†ng tr√≤ chuy·ªán, h·ªó tr·ª£ b·∫°n b·∫•t c·ª© khi n√†o. C√≤n b·∫°n th√¨ sao? D·∫°o n√†y c√¥ng vi·ªác v√† cu·ªôc s·ªëng c·ªßa b·∫°n th·∫ø n√†o?"

      
      Tin nh·∫Øn: ${message}`;

      const result = await chat.sendMessage(prompt);
      const response = await result.response; 
      return response.text(); 
    } catch (error) { 
      console.error('Gemini error:', error);
      throw new Error('L·ªói khi x·ª≠ l√Ω tin nh·∫Øn v·ªõi AI');
    }
  }
}

module.exports = new GeminiService();
